//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrucoPrueba1.TrucoServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStats", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class PlayerStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Losses {
            get {
                return this.LossesField;
            }
            set {
                if ((this.LossesField.Equals(value) != true)) {
                    this.LossesField = value;
                    this.RaisePropertyChanged("Losses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchResult", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class MatchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrucoServer.ITrucoService", CallbackContract=typeof(TrucoPrueba1.TrucoServer.ITrucoServiceCallback))]
    public interface ITrucoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/Register", ReplyAction="http://tempuri.org/ITrucoService/RegisterResponse")]
        bool Register(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/Register", ReplyAction="http://tempuri.org/ITrucoService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/Login", ReplyAction="http://tempuri.org/ITrucoService/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/Login", ReplyAction="http://tempuri.org/ITrucoService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/Logout")]
        void Logout(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetOnlinePlayers", ReplyAction="http://tempuri.org/ITrucoService/GetOnlinePlayersResponse")]
        string[] GetOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetOnlinePlayers", ReplyAction="http://tempuri.org/ITrucoService/GetOnlinePlayersResponse")]
        System.Threading.Tasks.Task<string[]> GetOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/SendFriendRequest", ReplyAction="http://tempuri.org/ITrucoService/SendFriendRequestResponse")]
        bool SendFriendRequest(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/SendFriendRequest", ReplyAction="http://tempuri.org/ITrucoService/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> SendFriendRequestAsync(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/AcceptFriendRequest")]
        void AcceptFriendRequest(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetFriends", ReplyAction="http://tempuri.org/ITrucoService/GetFriendsResponse")]
        string[] GetFriends(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetFriends", ReplyAction="http://tempuri.org/ITrucoService/GetFriendsResponse")]
        System.Threading.Tasks.Task<string[]> GetFriendsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/CreateMatch", ReplyAction="http://tempuri.org/ITrucoService/CreateMatchResponse")]
        string CreateMatch(string hostPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/CreateMatch", ReplyAction="http://tempuri.org/ITrucoService/CreateMatchResponse")]
        System.Threading.Tasks.Task<string> CreateMatchAsync(string hostPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/JoinMatch", ReplyAction="http://tempuri.org/ITrucoService/JoinMatchResponse")]
        bool JoinMatch(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/JoinMatch", ReplyAction="http://tempuri.org/ITrucoService/JoinMatchResponse")]
        System.Threading.Tasks.Task<bool> JoinMatchAsync(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/LeaveMatch")]
        void LeaveMatch(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/LeaveMatch")]
        System.Threading.Tasks.Task LeaveMatchAsync(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/PlayCard")]
        void PlayCard(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/PlayCard")]
        System.Threading.Tasks.Task PlayCardAsync(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/SendChatMessage")]
        void SendChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/SendChatMessage")]
        System.Threading.Tasks.Task SendChatMessageAsync(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetGlobalRanking", ReplyAction="http://tempuri.org/ITrucoService/GetGlobalRankingResponse")]
        TrucoPrueba1.TrucoServer.PlayerStats[] GetGlobalRanking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetGlobalRanking", ReplyAction="http://tempuri.org/ITrucoService/GetGlobalRankingResponse")]
        System.Threading.Tasks.Task<TrucoPrueba1.TrucoServer.PlayerStats[]> GetGlobalRankingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetLastMatches", ReplyAction="http://tempuri.org/ITrucoService/GetLastMatchesResponse")]
        TrucoPrueba1.TrucoServer.MatchResult[] GetLastMatches(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoService/GetLastMatches", ReplyAction="http://tempuri.org/ITrucoService/GetLastMatchesResponse")]
        System.Threading.Tasks.Task<TrucoPrueba1.TrucoServer.MatchResult[]> GetLastMatchesAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnPlayerJoined")]
        void OnPlayerJoined(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnPlayerLeft")]
        void OnPlayerLeft(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnCardPlayed")]
        void OnCardPlayed(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnChatMessage")]
        void OnChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnMatchStarted")]
        void OnMatchStarted(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnMatchEnded")]
        void OnMatchEnded(string matchCode, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnFriendRequestReceived")]
        void OnFriendRequestReceived(string fromUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoService/OnFriendRequestAccepted")]
        void OnFriendRequestAccepted(string fromUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoServiceChannel : TrucoPrueba1.TrucoServer.ITrucoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrucoServiceClient : System.ServiceModel.DuplexClientBase<TrucoPrueba1.TrucoServer.ITrucoService>, TrucoPrueba1.TrucoServer.ITrucoService {
        
        public TrucoServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrucoServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrucoServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Register(string username, string password, string email) {
            return base.Channel.Register(username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string email) {
            return base.Channel.RegisterAsync(username, password, email);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Logout(string username) {
            base.Channel.Logout(username);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string username) {
            return base.Channel.LogoutAsync(username);
        }
        
        public string[] GetOnlinePlayers() {
            return base.Channel.GetOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetOnlinePlayersAsync() {
            return base.Channel.GetOnlinePlayersAsync();
        }
        
        public bool SendFriendRequest(string fromUser, string toUser) {
            return base.Channel.SendFriendRequest(fromUser, toUser);
        }
        
        public System.Threading.Tasks.Task<bool> SendFriendRequestAsync(string fromUser, string toUser) {
            return base.Channel.SendFriendRequestAsync(fromUser, toUser);
        }
        
        public void AcceptFriendRequest(string fromUser, string toUser) {
            base.Channel.AcceptFriendRequest(fromUser, toUser);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(string fromUser, string toUser) {
            return base.Channel.AcceptFriendRequestAsync(fromUser, toUser);
        }
        
        public string[] GetFriends(string username) {
            return base.Channel.GetFriends(username);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFriendsAsync(string username) {
            return base.Channel.GetFriendsAsync(username);
        }
        
        public string CreateMatch(string hostPlayer) {
            return base.Channel.CreateMatch(hostPlayer);
        }
        
        public System.Threading.Tasks.Task<string> CreateMatchAsync(string hostPlayer) {
            return base.Channel.CreateMatchAsync(hostPlayer);
        }
        
        public bool JoinMatch(string matchCode, string player) {
            return base.Channel.JoinMatch(matchCode, player);
        }
        
        public System.Threading.Tasks.Task<bool> JoinMatchAsync(string matchCode, string player) {
            return base.Channel.JoinMatchAsync(matchCode, player);
        }
        
        public void LeaveMatch(string matchCode, string player) {
            base.Channel.LeaveMatch(matchCode, player);
        }
        
        public System.Threading.Tasks.Task LeaveMatchAsync(string matchCode, string player) {
            return base.Channel.LeaveMatchAsync(matchCode, player);
        }
        
        public void PlayCard(string matchCode, string player, string card) {
            base.Channel.PlayCard(matchCode, player, card);
        }
        
        public System.Threading.Tasks.Task PlayCardAsync(string matchCode, string player, string card) {
            return base.Channel.PlayCardAsync(matchCode, player, card);
        }
        
        public void SendChatMessage(string matchCode, string player, string message) {
            base.Channel.SendChatMessage(matchCode, player, message);
        }
        
        public System.Threading.Tasks.Task SendChatMessageAsync(string matchCode, string player, string message) {
            return base.Channel.SendChatMessageAsync(matchCode, player, message);
        }
        
        public TrucoPrueba1.TrucoServer.PlayerStats[] GetGlobalRanking() {
            return base.Channel.GetGlobalRanking();
        }
        
        public System.Threading.Tasks.Task<TrucoPrueba1.TrucoServer.PlayerStats[]> GetGlobalRankingAsync() {
            return base.Channel.GetGlobalRankingAsync();
        }
        
        public TrucoPrueba1.TrucoServer.MatchResult[] GetLastMatches(string username) {
            return base.Channel.GetLastMatches(username);
        }
        
        public System.Threading.Tasks.Task<TrucoPrueba1.TrucoServer.MatchResult[]> GetLastMatchesAsync(string username) {
            return base.Channel.GetLastMatchesAsync(username);
        }
    }
}
