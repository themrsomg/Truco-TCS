//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrucoClient.TrucoServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserProfileData", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class UserProfileData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvatarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private TrucoClient.TrucoServer.EmblemLayer[] EmblemLayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FacebookHandleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstagramHandleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NameChangeCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SocialLinksJsonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string XHandleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvatarId {
            get {
                return this.AvatarIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarIdField, value) != true)) {
                    this.AvatarIdField = value;
                    this.RaisePropertyChanged("AvatarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public TrucoClient.TrucoServer.EmblemLayer[] EmblemLayers {
            get {
                return this.EmblemLayersField;
            }
            set {
                if ((object.ReferenceEquals(this.EmblemLayersField, value) != true)) {
                    this.EmblemLayersField = value;
                    this.RaisePropertyChanged("EmblemLayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FacebookHandle {
            get {
                return this.FacebookHandleField;
            }
            set {
                if ((object.ReferenceEquals(this.FacebookHandleField, value) != true)) {
                    this.FacebookHandleField = value;
                    this.RaisePropertyChanged("FacebookHandle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstagramHandle {
            get {
                return this.InstagramHandleField;
            }
            set {
                if ((object.ReferenceEquals(this.InstagramHandleField, value) != true)) {
                    this.InstagramHandleField = value;
                    this.RaisePropertyChanged("InstagramHandle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NameChangeCount {
            get {
                return this.NameChangeCountField;
            }
            set {
                if ((this.NameChangeCountField.Equals(value) != true)) {
                    this.NameChangeCountField = value;
                    this.RaisePropertyChanged("NameChangeCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] SocialLinksJson {
            get {
                return this.SocialLinksJsonField;
            }
            set {
                if ((object.ReferenceEquals(this.SocialLinksJsonField, value) != true)) {
                    this.SocialLinksJsonField = value;
                    this.RaisePropertyChanged("SocialLinksJson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string XHandle {
            get {
                return this.XHandleField;
            }
            set {
                if ((object.ReferenceEquals(this.XHandleField, value) != true)) {
                    this.XHandleField = value;
                    this.RaisePropertyChanged("XHandle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmblemLayer", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class EmblemLayer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorHexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RotationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScaleXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScaleYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ShapeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZIndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColorHex {
            get {
                return this.ColorHexField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorHexField, value) != true)) {
                    this.ColorHexField = value;
                    this.RaisePropertyChanged("ColorHex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rotation {
            get {
                return this.RotationField;
            }
            set {
                if ((this.RotationField.Equals(value) != true)) {
                    this.RotationField = value;
                    this.RaisePropertyChanged("Rotation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScaleX {
            get {
                return this.ScaleXField;
            }
            set {
                if ((this.ScaleXField.Equals(value) != true)) {
                    this.ScaleXField = value;
                    this.RaisePropertyChanged("ScaleX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScaleY {
            get {
                return this.ScaleYField;
            }
            set {
                if ((this.ScaleYField.Equals(value) != true)) {
                    this.ScaleYField = value;
                    this.RaisePropertyChanged("ScaleY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShapeId {
            get {
                return this.ShapeIdField;
            }
            set {
                if ((this.ShapeIdField.Equals(value) != true)) {
                    this.ShapeIdField = value;
                    this.RaisePropertyChanged("ShapeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZIndex {
            get {
                return this.ZIndexField;
            }
            set {
                if ((this.ZIndexField.Equals(value) != true)) {
                    this.ZIndexField = value;
                    this.RaisePropertyChanged("ZIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStats", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class PlayerStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WinsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Losses {
            get {
                return this.LossesField;
            }
            set {
                if ((this.LossesField.Equals(value) != true)) {
                    this.LossesField = value;
                    this.RaisePropertyChanged("Losses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerName {
            get {
                return this.PlayerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerNameField, value) != true)) {
                    this.PlayerNameField = value;
                    this.RaisePropertyChanged("PlayerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins {
            get {
                return this.WinsField;
            }
            set {
                if ((this.WinsField.Equals(value) != true)) {
                    this.WinsField = value;
                    this.RaisePropertyChanged("Wins");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchResult", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class MatchResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendData", Namespace="http://schemas.datacontract.org/2004/07/TrucoServer")]
    [System.SerializableAttribute()]
    public partial class FriendData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvatarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvatarId {
            get {
                return this.AvatarIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarIdField, value) != true)) {
                    this.AvatarIdField = value;
                    this.RaisePropertyChanged("AvatarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrucoServer.ITrucoUserService", CallbackContract=typeof(TrucoClient.TrucoServer.ITrucoUserServiceCallback))]
    public interface ITrucoUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/RequestEmailVerification", ReplyAction="http://tempuri.org/ITrucoUserService/RequestEmailVerificationResponse")]
        bool RequestEmailVerification(string email, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/RequestEmailVerification", ReplyAction="http://tempuri.org/ITrucoUserService/RequestEmailVerificationResponse")]
        System.Threading.Tasks.Task<bool> RequestEmailVerificationAsync(string email, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/ConfirmEmailVerification", ReplyAction="http://tempuri.org/ITrucoUserService/ConfirmEmailVerificationResponse")]
        bool ConfirmEmailVerification(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/ConfirmEmailVerification", ReplyAction="http://tempuri.org/ITrucoUserService/ConfirmEmailVerificationResponse")]
        System.Threading.Tasks.Task<bool> ConfirmEmailVerificationAsync(string email, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/Register", ReplyAction="http://tempuri.org/ITrucoUserService/RegisterResponse")]
        bool Register(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/Register", ReplyAction="http://tempuri.org/ITrucoUserService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/UsernameExists", ReplyAction="http://tempuri.org/ITrucoUserService/UsernameExistsResponse")]
        bool UsernameExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/UsernameExists", ReplyAction="http://tempuri.org/ITrucoUserService/UsernameExistsResponse")]
        System.Threading.Tasks.Task<bool> UsernameExistsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/EmailExists", ReplyAction="http://tempuri.org/ITrucoUserService/EmailExistsResponse")]
        bool EmailExists(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/EmailExists", ReplyAction="http://tempuri.org/ITrucoUserService/EmailExistsResponse")]
        System.Threading.Tasks.Task<bool> EmailExistsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/Login", ReplyAction="http://tempuri.org/ITrucoUserService/LoginResponse")]
        bool Login(string username, string password, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/Login", ReplyAction="http://tempuri.org/ITrucoUserService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/UpdateUserAvatar", ReplyAction="http://tempuri.org/ITrucoUserService/UpdateUserAvatarResponse")]
        bool UpdateUserAvatar(string username, string newAvatarId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/UpdateUserAvatar", ReplyAction="http://tempuri.org/ITrucoUserService/UpdateUserAvatarResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAvatarAsync(string username, string newAvatarId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetUserProfileByEmail", ReplyAction="http://tempuri.org/ITrucoUserService/GetUserProfileByEmailResponse")]
        TrucoClient.TrucoServer.UserProfileData GetUserProfileByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetUserProfileByEmail", ReplyAction="http://tempuri.org/ITrucoUserService/GetUserProfileByEmailResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.UserProfileData> GetUserProfileByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetOnlinePlayers", ReplyAction="http://tempuri.org/ITrucoUserService/GetOnlinePlayersResponse")]
        string[] GetOnlinePlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetOnlinePlayers", ReplyAction="http://tempuri.org/ITrucoUserService/GetOnlinePlayersResponse")]
        System.Threading.Tasks.Task<string[]> GetOnlinePlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetGlobalRanking", ReplyAction="http://tempuri.org/ITrucoUserService/GetGlobalRankingResponse")]
        TrucoClient.TrucoServer.PlayerStats[] GetGlobalRanking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetGlobalRanking", ReplyAction="http://tempuri.org/ITrucoUserService/GetGlobalRankingResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.PlayerStats[]> GetGlobalRankingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetLastMatches", ReplyAction="http://tempuri.org/ITrucoUserService/GetLastMatchesResponse")]
        TrucoClient.TrucoServer.MatchResult[] GetLastMatches(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetLastMatches", ReplyAction="http://tempuri.org/ITrucoUserService/GetLastMatchesResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.MatchResult[]> GetLastMatchesAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetUserProfile", ReplyAction="http://tempuri.org/ITrucoUserService/GetUserProfileResponse")]
        TrucoClient.TrucoServer.UserProfileData GetUserProfile(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/GetUserProfile", ReplyAction="http://tempuri.org/ITrucoUserService/GetUserProfileResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.UserProfileData> GetUserProfileAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/SaveUserProfile", ReplyAction="http://tempuri.org/ITrucoUserService/SaveUserProfileResponse")]
        bool SaveUserProfile(TrucoClient.TrucoServer.UserProfileData profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/SaveUserProfile", ReplyAction="http://tempuri.org/ITrucoUserService/SaveUserProfileResponse")]
        System.Threading.Tasks.Task<bool> SaveUserProfileAsync(TrucoClient.TrucoServer.UserProfileData profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/PasswordReset", ReplyAction="http://tempuri.org/ITrucoUserService/PasswordResetResponse")]
        bool PasswordReset(string email, string code, string newPassword, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/PasswordReset", ReplyAction="http://tempuri.org/ITrucoUserService/PasswordResetResponse")]
        System.Threading.Tasks.Task<bool> PasswordResetAsync(string email, string code, string newPassword, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/PasswordChange", ReplyAction="http://tempuri.org/ITrucoUserService/PasswordChangeResponse")]
        bool PasswordChange(string email, string newPassword, string languageCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoUserService/PasswordChange", ReplyAction="http://tempuri.org/ITrucoUserService/PasswordChangeResponse")]
        System.Threading.Tasks.Task<bool> PasswordChangeAsync(string email, string newPassword, string languageCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoUserServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnPlayerJoined")]
        void OnPlayerJoined(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnPlayerLeft")]
        void OnPlayerLeft(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnCardPlayed")]
        void OnCardPlayed(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnChatMessage")]
        void OnChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnMatchStarted")]
        void OnMatchStarted(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnMatchEnded")]
        void OnMatchEnded(string matchCode, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnFriendRequestReceived")]
        void OnFriendRequestReceived(string fromUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoUserService/OnFriendRequestAccepted")]
        void OnFriendRequestAccepted(string fromUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoUserServiceChannel : TrucoClient.TrucoServer.ITrucoUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrucoUserServiceClient : System.ServiceModel.DuplexClientBase<TrucoClient.TrucoServer.ITrucoUserService>, TrucoClient.TrucoServer.ITrucoUserService {
        
        public TrucoUserServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrucoUserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrucoUserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoUserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoUserServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RequestEmailVerification(string email, string languageCode) {
            return base.Channel.RequestEmailVerification(email, languageCode);
        }
        
        public System.Threading.Tasks.Task<bool> RequestEmailVerificationAsync(string email, string languageCode) {
            return base.Channel.RequestEmailVerificationAsync(email, languageCode);
        }
        
        public bool ConfirmEmailVerification(string email, string code) {
            return base.Channel.ConfirmEmailVerification(email, code);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmEmailVerificationAsync(string email, string code) {
            return base.Channel.ConfirmEmailVerificationAsync(email, code);
        }
        
        public bool Register(string username, string password, string email) {
            return base.Channel.Register(username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string username, string password, string email) {
            return base.Channel.RegisterAsync(username, password, email);
        }
        
        public bool UsernameExists(string username) {
            return base.Channel.UsernameExists(username);
        }
        
        public System.Threading.Tasks.Task<bool> UsernameExistsAsync(string username) {
            return base.Channel.UsernameExistsAsync(username);
        }
        
        public bool EmailExists(string email) {
            return base.Channel.EmailExists(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailExistsAsync(string email) {
            return base.Channel.EmailExistsAsync(email);
        }
        
        public bool Login(string username, string password, string languageCode) {
            return base.Channel.Login(username, password, languageCode);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password, string languageCode) {
            return base.Channel.LoginAsync(username, password, languageCode);
        }
        
        public bool UpdateUserAvatar(string username, string newAvatarId) {
            return base.Channel.UpdateUserAvatar(username, newAvatarId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAvatarAsync(string username, string newAvatarId) {
            return base.Channel.UpdateUserAvatarAsync(username, newAvatarId);
        }
        
        public TrucoClient.TrucoServer.UserProfileData GetUserProfileByEmail(string email) {
            return base.Channel.GetUserProfileByEmail(email);
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.UserProfileData> GetUserProfileByEmailAsync(string email) {
            return base.Channel.GetUserProfileByEmailAsync(email);
        }
        
        public string[] GetOnlinePlayers() {
            return base.Channel.GetOnlinePlayers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetOnlinePlayersAsync() {
            return base.Channel.GetOnlinePlayersAsync();
        }
        
        public TrucoClient.TrucoServer.PlayerStats[] GetGlobalRanking() {
            return base.Channel.GetGlobalRanking();
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.PlayerStats[]> GetGlobalRankingAsync() {
            return base.Channel.GetGlobalRankingAsync();
        }
        
        public TrucoClient.TrucoServer.MatchResult[] GetLastMatches(string username) {
            return base.Channel.GetLastMatches(username);
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.MatchResult[]> GetLastMatchesAsync(string username) {
            return base.Channel.GetLastMatchesAsync(username);
        }
        
        public TrucoClient.TrucoServer.UserProfileData GetUserProfile(string username) {
            return base.Channel.GetUserProfile(username);
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.UserProfileData> GetUserProfileAsync(string username) {
            return base.Channel.GetUserProfileAsync(username);
        }
        
        public bool SaveUserProfile(TrucoClient.TrucoServer.UserProfileData profile) {
            return base.Channel.SaveUserProfile(profile);
        }
        
        public System.Threading.Tasks.Task<bool> SaveUserProfileAsync(TrucoClient.TrucoServer.UserProfileData profile) {
            return base.Channel.SaveUserProfileAsync(profile);
        }
        
        public bool PasswordReset(string email, string code, string newPassword, string languageCode) {
            return base.Channel.PasswordReset(email, code, newPassword, languageCode);
        }
        
        public System.Threading.Tasks.Task<bool> PasswordResetAsync(string email, string code, string newPassword, string languageCode) {
            return base.Channel.PasswordResetAsync(email, code, newPassword, languageCode);
        }
        
        public bool PasswordChange(string email, string newPassword, string languageCode) {
            return base.Channel.PasswordChange(email, newPassword, languageCode);
        }
        
        public System.Threading.Tasks.Task<bool> PasswordChangeAsync(string email, string newPassword, string languageCode) {
            return base.Channel.PasswordChangeAsync(email, newPassword, languageCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrucoServer.ITrucoMatchService", CallbackContract=typeof(TrucoClient.TrucoServer.ITrucoMatchServiceCallback))]
    public interface ITrucoMatchService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoMatchService/CreateMatch", ReplyAction="http://tempuri.org/ITrucoMatchService/CreateMatchResponse")]
        string CreateMatch(string hostPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoMatchService/CreateMatch", ReplyAction="http://tempuri.org/ITrucoMatchService/CreateMatchResponse")]
        System.Threading.Tasks.Task<string> CreateMatchAsync(string hostPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoMatchService/JoinMatch", ReplyAction="http://tempuri.org/ITrucoMatchService/JoinMatchResponse")]
        bool JoinMatch(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoMatchService/JoinMatch", ReplyAction="http://tempuri.org/ITrucoMatchService/JoinMatchResponse")]
        System.Threading.Tasks.Task<bool> JoinMatchAsync(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/LeaveMatch")]
        void LeaveMatch(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/LeaveMatch")]
        System.Threading.Tasks.Task LeaveMatchAsync(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/PlayCard")]
        void PlayCard(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/PlayCard")]
        System.Threading.Tasks.Task PlayCardAsync(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/SendChatMessage")]
        void SendChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/SendChatMessage")]
        System.Threading.Tasks.Task SendChatMessageAsync(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/JoinMatchChat")]
        void JoinMatchChat(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/JoinMatchChat")]
        System.Threading.Tasks.Task JoinMatchChatAsync(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/LeaveMatchChat")]
        void LeaveMatchChat(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/LeaveMatchChat")]
        System.Threading.Tasks.Task LeaveMatchChatAsync(string matchCode, string player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoMatchServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnPlayerJoined")]
        void OnPlayerJoined(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnPlayerLeft")]
        void OnPlayerLeft(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnCardPlayed")]
        void OnCardPlayed(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnChatMessage")]
        void OnChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnMatchStarted")]
        void OnMatchStarted(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnMatchEnded")]
        void OnMatchEnded(string matchCode, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnFriendRequestReceived")]
        void OnFriendRequestReceived(string fromUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoMatchService/OnFriendRequestAccepted")]
        void OnFriendRequestAccepted(string fromUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoMatchServiceChannel : TrucoClient.TrucoServer.ITrucoMatchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrucoMatchServiceClient : System.ServiceModel.DuplexClientBase<TrucoClient.TrucoServer.ITrucoMatchService>, TrucoClient.TrucoServer.ITrucoMatchService {
        
        public TrucoMatchServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrucoMatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrucoMatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoMatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoMatchServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string CreateMatch(string hostPlayer) {
            return base.Channel.CreateMatch(hostPlayer);
        }
        
        public System.Threading.Tasks.Task<string> CreateMatchAsync(string hostPlayer) {
            return base.Channel.CreateMatchAsync(hostPlayer);
        }
        
        public bool JoinMatch(string matchCode, string player) {
            return base.Channel.JoinMatch(matchCode, player);
        }
        
        public System.Threading.Tasks.Task<bool> JoinMatchAsync(string matchCode, string player) {
            return base.Channel.JoinMatchAsync(matchCode, player);
        }
        
        public void LeaveMatch(string matchCode, string player) {
            base.Channel.LeaveMatch(matchCode, player);
        }
        
        public System.Threading.Tasks.Task LeaveMatchAsync(string matchCode, string player) {
            return base.Channel.LeaveMatchAsync(matchCode, player);
        }
        
        public void PlayCard(string matchCode, string player, string card) {
            base.Channel.PlayCard(matchCode, player, card);
        }
        
        public System.Threading.Tasks.Task PlayCardAsync(string matchCode, string player, string card) {
            return base.Channel.PlayCardAsync(matchCode, player, card);
        }
        
        public void SendChatMessage(string matchCode, string player, string message) {
            base.Channel.SendChatMessage(matchCode, player, message);
        }
        
        public System.Threading.Tasks.Task SendChatMessageAsync(string matchCode, string player, string message) {
            return base.Channel.SendChatMessageAsync(matchCode, player, message);
        }
        
        public void JoinMatchChat(string matchCode, string player) {
            base.Channel.JoinMatchChat(matchCode, player);
        }
        
        public System.Threading.Tasks.Task JoinMatchChatAsync(string matchCode, string player) {
            return base.Channel.JoinMatchChatAsync(matchCode, player);
        }
        
        public void LeaveMatchChat(string matchCode, string player) {
            base.Channel.LeaveMatchChat(matchCode, player);
        }
        
        public System.Threading.Tasks.Task LeaveMatchChatAsync(string matchCode, string player) {
            return base.Channel.LeaveMatchChatAsync(matchCode, player);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TrucoServer.ITrucoFriendService", CallbackContract=typeof(TrucoClient.TrucoServer.ITrucoFriendServiceCallback))]
    public interface ITrucoFriendService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/SendFriendRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/SendFriendRequestResponse")]
        bool SendFriendRequest(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/SendFriendRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/SendFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> SendFriendRequestAsync(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/AcceptFriendRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/AcceptFriendRequestResponse")]
        bool AcceptFriendRequest(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/AcceptFriendRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/AcceptFriendRequestResponse")]
        System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(string fromUser, string toUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/RemoveFriendOrRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/RemoveFriendOrRequestResponse")]
        bool RemoveFriendOrRequest(string user1, string user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/RemoveFriendOrRequest", ReplyAction="http://tempuri.org/ITrucoFriendService/RemoveFriendOrRequestResponse")]
        System.Threading.Tasks.Task<bool> RemoveFriendOrRequestAsync(string user1, string user2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/GetFriends", ReplyAction="http://tempuri.org/ITrucoFriendService/GetFriendsResponse")]
        TrucoClient.TrucoServer.FriendData[] GetFriends(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/GetFriends", ReplyAction="http://tempuri.org/ITrucoFriendService/GetFriendsResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.FriendData[]> GetFriendsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/GetPendingFriendRequests", ReplyAction="http://tempuri.org/ITrucoFriendService/GetPendingFriendRequestsResponse")]
        TrucoClient.TrucoServer.FriendData[] GetPendingFriendRequests(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrucoFriendService/GetPendingFriendRequests", ReplyAction="http://tempuri.org/ITrucoFriendService/GetPendingFriendRequestsResponse")]
        System.Threading.Tasks.Task<TrucoClient.TrucoServer.FriendData[]> GetPendingFriendRequestsAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoFriendServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnPlayerJoined")]
        void OnPlayerJoined(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnPlayerLeft")]
        void OnPlayerLeft(string matchCode, string player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnCardPlayed")]
        void OnCardPlayed(string matchCode, string player, string card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnChatMessage")]
        void OnChatMessage(string matchCode, string player, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnMatchStarted")]
        void OnMatchStarted(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnMatchEnded")]
        void OnMatchEnded(string matchCode, string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnFriendRequestReceived")]
        void OnFriendRequestReceived(string fromUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrucoFriendService/OnFriendRequestAccepted")]
        void OnFriendRequestAccepted(string fromUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrucoFriendServiceChannel : TrucoClient.TrucoServer.ITrucoFriendService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrucoFriendServiceClient : System.ServiceModel.DuplexClientBase<TrucoClient.TrucoServer.ITrucoFriendService>, TrucoClient.TrucoServer.ITrucoFriendService {
        
        public TrucoFriendServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrucoFriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrucoFriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoFriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrucoFriendServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool SendFriendRequest(string fromUser, string toUser) {
            return base.Channel.SendFriendRequest(fromUser, toUser);
        }
        
        public System.Threading.Tasks.Task<bool> SendFriendRequestAsync(string fromUser, string toUser) {
            return base.Channel.SendFriendRequestAsync(fromUser, toUser);
        }
        
        public bool AcceptFriendRequest(string fromUser, string toUser) {
            return base.Channel.AcceptFriendRequest(fromUser, toUser);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptFriendRequestAsync(string fromUser, string toUser) {
            return base.Channel.AcceptFriendRequestAsync(fromUser, toUser);
        }
        
        public bool RemoveFriendOrRequest(string user1, string user2) {
            return base.Channel.RemoveFriendOrRequest(user1, user2);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFriendOrRequestAsync(string user1, string user2) {
            return base.Channel.RemoveFriendOrRequestAsync(user1, user2);
        }
        
        public TrucoClient.TrucoServer.FriendData[] GetFriends(string username) {
            return base.Channel.GetFriends(username);
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.FriendData[]> GetFriendsAsync(string username) {
            return base.Channel.GetFriendsAsync(username);
        }
        
        public TrucoClient.TrucoServer.FriendData[] GetPendingFriendRequests(string username) {
            return base.Channel.GetPendingFriendRequests(username);
        }
        
        public System.Threading.Tasks.Task<TrucoClient.TrucoServer.FriendData[]> GetPendingFriendRequestsAsync(string username) {
            return base.Channel.GetPendingFriendRequestsAsync(username);
        }
    }
}
